{
    "docs": [
        {
            "location": "/", 
            "text": "About Kakunin\n\n\nKakunin is a Protractor extension created by The Software House sp. z o.o. and Takamol Holding. It allows you\nto write e2e test scenarios with a help of Gherkin language and JavaScript for all kind of applications - Angular, React and others.\n\n\nInstallation\n\n\nIn order to install Kakunin you have to make sure that you have installed:\n\n\nnode.js - v7.8.0 min\nJDK\nChrome\n\n\n\n\n\nCreate directory for your project \nmkdir my_project\n\n\nGo to project directory \ncd my_project\n\n\nInitialize JavaScript project by typing \nnpm init\n\n\nOpen \npackage.json\n file and add required dev dependencies:\n\n\n\n\nwebdriver-manager\n: \n12.0.6\n,\n\nprotractor\n: \n5.1.2\n,\n\nkakunin\n: \ngit+ssh://git@bitbucket.org/thesoftwarehouse/e2e-pascal.git#fixes\n\n\n\n\n\n\n\nIn \npackage.json\n add new script in \nscripts\n section:\n\n\n\n\nkakunin\n: \nNODE_ENV=prod kakunin\n\n\n\n\n\n\n\nInstall dependencies \nnpm install\n\n\nCreate kakunin project \nnpm run kakunin init\n\n\nAnswer what kind of app you're going to test (\ndefault: NG1\n)\n\n\nFill url for your app (\ndefault: http://localhost:3000\n)\n\n\nAre you going to use some emails checking service ? (\ndefault: none\n)\n\n\nRun Kakunin's testing features \nnpm run kakunin\n\n\n\n\nYou're read to use Kakunin.\n\n\nTips\n\n\nIn order to use autosuggest functionality in JETBrains tools, make sure your project is \nECMAScript 6\n compatible and you have \ncucumberjs\n plugin installed.\n\n\nIf it is, go to \nstep_definitions\n directory \ncd step_definitions\n and paste this code into terminal and restart your IDE:\n\n\nln -s ../node_modules/kakunin/dist/step_definitions/elements.js kakunin-elements.js\nln -s ../node_modules/kakunin/dist/step_definitions/debug.js kakunin-debug.js\nln -s ../node_modules/kakunin/dist/step_definitions/file.js kakunin-file.js\nln -s ../node_modules/kakunin/dist/step_definitions/form.js kakunin-form.js\nln -s ../node_modules/kakunin/dist/step_definitions/email.js kakunin-email.js\nln -s ../node_modules/kakunin/dist/step_definitions/generators.js kakunin-generators.js\nln -s ../node_modules/kakunin/dist/step_definitions/navigation.js kakunin-navigation.js \n\n\n\n\nThis will create symlinks inside \nstep_definitions\n directory and make \ncucumberjs\n plugin recognize kakunin built-in steps.\n\n\nCommands\n\n\n\n\nnpm run kakunin init [-- --advanced]\n - Create a new project by answering few simple questions (you can pass additional parameter to enter advanced mode where you can configure all Kakunin options by yourself)\n\n\nnpm run kakunin\n - Run test scenarios\n\n\nnpm run kakunin -- --tags @someTag\n - Run only scenarios tagged by \n@someTag\n\n\nnpm run kakunin -- --tags \"@someTag and @otherTag\"\n - Run only scenarios tagged by \n@someTag\n and \n@otherTag\n at the same time\n\n\nnpm run kakunin -- --tags \"@someTag or @otherTag\"\n - Run only scenarios tagged by \n@someTag\n or \n@otherTag\n\n\nnpm run kakunin -- --tags \"not @someTag\"\n - Run only scenarios not tagged by \n@someTag", 
            "title": "Getting started"
        }, 
        {
            "location": "/#about-kakunin", 
            "text": "Kakunin is a Protractor extension created by The Software House sp. z o.o. and Takamol Holding. It allows you\nto write e2e test scenarios with a help of Gherkin language and JavaScript for all kind of applications - Angular, React and others.", 
            "title": "About Kakunin"
        }, 
        {
            "location": "/#installation", 
            "text": "In order to install Kakunin you have to make sure that you have installed:  node.js - v7.8.0 min\nJDK\nChrome   Create directory for your project  mkdir my_project  Go to project directory  cd my_project  Initialize JavaScript project by typing  npm init  Open  package.json  file and add required dev dependencies:   webdriver-manager :  12.0.6 , protractor :  5.1.2 , kakunin :  git+ssh://git@bitbucket.org/thesoftwarehouse/e2e-pascal.git#fixes    In  package.json  add new script in  scripts  section:   kakunin :  NODE_ENV=prod kakunin    Install dependencies  npm install  Create kakunin project  npm run kakunin init  Answer what kind of app you're going to test ( default: NG1 )  Fill url for your app ( default: http://localhost:3000 )  Are you going to use some emails checking service ? ( default: none )  Run Kakunin's testing features  npm run kakunin   You're read to use Kakunin.", 
            "title": "Installation"
        }, 
        {
            "location": "/#tips", 
            "text": "In order to use autosuggest functionality in JETBrains tools, make sure your project is  ECMAScript 6  compatible and you have  cucumberjs  plugin installed.  If it is, go to  step_definitions  directory  cd step_definitions  and paste this code into terminal and restart your IDE:  ln -s ../node_modules/kakunin/dist/step_definitions/elements.js kakunin-elements.js\nln -s ../node_modules/kakunin/dist/step_definitions/debug.js kakunin-debug.js\nln -s ../node_modules/kakunin/dist/step_definitions/file.js kakunin-file.js\nln -s ../node_modules/kakunin/dist/step_definitions/form.js kakunin-form.js\nln -s ../node_modules/kakunin/dist/step_definitions/email.js kakunin-email.js\nln -s ../node_modules/kakunin/dist/step_definitions/generators.js kakunin-generators.js\nln -s ../node_modules/kakunin/dist/step_definitions/navigation.js kakunin-navigation.js   This will create symlinks inside  step_definitions  directory and make  cucumberjs  plugin recognize kakunin built-in steps.", 
            "title": "Tips"
        }, 
        {
            "location": "/#commands", 
            "text": "npm run kakunin init [-- --advanced]  - Create a new project by answering few simple questions (you can pass additional parameter to enter advanced mode where you can configure all Kakunin options by yourself)  npm run kakunin  - Run test scenarios  npm run kakunin -- --tags @someTag  - Run only scenarios tagged by  @someTag  npm run kakunin -- --tags \"@someTag and @otherTag\"  - Run only scenarios tagged by  @someTag  and  @otherTag  at the same time  npm run kakunin -- --tags \"@someTag or @otherTag\"  - Run only scenarios tagged by  @someTag  or  @otherTag  npm run kakunin -- --tags \"not @someTag\"  - Run only scenarios not tagged by  @someTag", 
            "title": "Commands"
        }, 
        {
            "location": "/configuration/", 
            "text": "Kakunin config\n\n\nmodule.exports = {\n    \nclearEmailInboxBeforeTests\n: false,\n    \nclearCookiesAfterScenario\n: true,\n    \nclearLocalStorageAfterScenario\n: true,\n    \nemail\n: null,\n    \nheadless\n: false,\n    \nnoGpu\n: false,\n    \ntype\n: \nng1\n,\n    \nbaseUrl\n: \nhttp://localhost:3000\n,\n    \naccounts\n: {\n        \nsomeAccount\n: {\n            \naccounts\n: [\n                {\n                    \nemail\n: \n,\n                    \npassword\n: \n\n                }\n            ]\n        }\n    }\n}\n\n\n\n\nConfiguration options\n\n\nbrowserWidth\n - width of browser window \ndefault: 1600\n\n\nbrowserheight\n - height of browser window \ndefault: 900\n\n\ntimeout\n - global timeout for a single step execution in seconds \ndefault: 60\n\n\nintervalEmail\n - interval for email checking step \ndefault: 5\n in seconds\n\n\nelementsVisibilityTimeout\n - maximum wait timeout for element visibility \ndefault: 5\n seconds\n\n\nwaitForPageTimeout\n - maximum wait timeout for page visibility \ndefault: 5\n seconds\n\n\ndownloadTimeout\n - maximum wait timeout for file to be downloaded \ndefault: 30\n seconds\n\n\nemails\n - array of paths to store emails related custom code\n\n\nreports\n - path to store reports\n\n\ndownloads\n - path to store downloaded files\n\n\ndata\n - path to store test related files (for example files to be downloaded)\n\n\nfeature\n - array of paths to store features\n\n\npages\n - array of paths to store page objects\n\n\nmatchers\n - array of paths to store custom matchers\n\n\ngenerators\n - array of paths to store custom generators\n\n\nform_handlers\n - array of paths to store custom form handlers\n\n\nstep_definitions\n - array of paths to store custom steps\n\n\ncomparators\n - array of paths to store custom comparators\n\n\ndictionaries\n - array of paths to store custom dictionaries\n\n\ntransformers\n - array of paths to store custom transformers\n\n\nregexes\n - array of paths to store custom regexes\n\n\nhooks\n - array of paths to store custom hooks\n\n\nclearEmailInboxBeforeTests\n - flag to active clearing email inbox before tests are executed \ndefault: false | true for apps with email checking functionality activated\n\n\nclearCookiesAfterScenario\n - flag to activate clearing cookies after every scenario \ndefault: true\n\n\nclearLocalStorageAfterScenario\n - flag to activate clearing local storage after every scenario \ndefault: true\n\n\nemail\n - email configuration \ndefault: null\n\n\nfor mailtrap email checking system:\n\n\ntype\n: \nmailtrap\n,\n\nconfig\n: {\n    \napiKey\n: \nyour-mailtrap-api-key\n,\n    \ninboxId\n: \nyour-mailtrap-inbox\n,\n    \nurl\n: \nhttps://mailtrap.io/api/v1\n\n}\n\n\n\n\nfor custom email checking system only type is required:\n\n\ntype\n: \ncustom-type\n\n\n\n\n\nheadless\n - flag to activate chrome headless browser \ndefault: false\n\n\nnoGpu\n - flag to activate cpu only mode \ndefault: false\n\n\ntype\n - type of application either \nng1 | ng2 | otherWeb\n\n\nbaseUrl\n - url of tested application\n\n\naccounts\n - object to store accounts information. This is bound to \nuserProvider\n and allows to use advanced email checking options like recipient checking.\n\n\nsomeAccount\n: {\n    \naccounts\n: [\n        {\n            \nemail\n: \n,\n            \npassword\n: \n\n        }\n    ]\n}\n\n\n\n\nEnvironment variables\n\n\nKakunin uses a single \n.env\n file to load ENV variables. By default there is only one:\n\n\nFIXTURES_RELOAD_HOST\n - allows you to specify host for fixtures reloading. This allows you to use \n@reloadFixtures\n tag on scenarios that should restore database to starting state, before the test is running", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#kakunin-config", 
            "text": "module.exports = {\n     clearEmailInboxBeforeTests : false,\n     clearCookiesAfterScenario : true,\n     clearLocalStorageAfterScenario : true,\n     email : null,\n     headless : false,\n     noGpu : false,\n     type :  ng1 ,\n     baseUrl :  http://localhost:3000 ,\n     accounts : {\n         someAccount : {\n             accounts : [\n                {\n                     email :  ,\n                     password :  \n                }\n            ]\n        }\n    }\n}", 
            "title": "Kakunin config"
        }, 
        {
            "location": "/configuration/#configuration-options", 
            "text": "browserWidth  - width of browser window  default: 1600  browserheight  - height of browser window  default: 900  timeout  - global timeout for a single step execution in seconds  default: 60  intervalEmail  - interval for email checking step  default: 5  in seconds  elementsVisibilityTimeout  - maximum wait timeout for element visibility  default: 5  seconds  waitForPageTimeout  - maximum wait timeout for page visibility  default: 5  seconds  downloadTimeout  - maximum wait timeout for file to be downloaded  default: 30  seconds  emails  - array of paths to store emails related custom code  reports  - path to store reports  downloads  - path to store downloaded files  data  - path to store test related files (for example files to be downloaded)  feature  - array of paths to store features  pages  - array of paths to store page objects  matchers  - array of paths to store custom matchers  generators  - array of paths to store custom generators  form_handlers  - array of paths to store custom form handlers  step_definitions  - array of paths to store custom steps  comparators  - array of paths to store custom comparators  dictionaries  - array of paths to store custom dictionaries  transformers  - array of paths to store custom transformers  regexes  - array of paths to store custom regexes  hooks  - array of paths to store custom hooks  clearEmailInboxBeforeTests  - flag to active clearing email inbox before tests are executed  default: false | true for apps with email checking functionality activated  clearCookiesAfterScenario  - flag to activate clearing cookies after every scenario  default: true  clearLocalStorageAfterScenario  - flag to activate clearing local storage after every scenario  default: true  email  - email configuration  default: null  for mailtrap email checking system:  type :  mailtrap , config : {\n     apiKey :  your-mailtrap-api-key ,\n     inboxId :  your-mailtrap-inbox ,\n     url :  https://mailtrap.io/api/v1 \n}  for custom email checking system only type is required:  type :  custom-type   headless  - flag to activate chrome headless browser  default: false  noGpu  - flag to activate cpu only mode  default: false  type  - type of application either  ng1 | ng2 | otherWeb  baseUrl  - url of tested application  accounts  - object to store accounts information. This is bound to  userProvider  and allows to use advanced email checking options like recipient checking.  someAccount : {\n     accounts : [\n        {\n             email :  ,\n             password :  \n        }\n    ]\n}", 
            "title": "Configuration options"
        }, 
        {
            "location": "/configuration/#environment-variables", 
            "text": "Kakunin uses a single  .env  file to load ENV variables. By default there is only one:  FIXTURES_RELOAD_HOST  - allows you to specify host for fixtures reloading. This allows you to use  @reloadFixtures  tag on scenarios that should restore database to starting state, before the test is running", 
            "title": "Environment variables"
        }, 
        {
            "location": "/how-it-works/", 
            "text": "Kakunin is built with \nno-js\n experience in mind. Because of that you're able to test even complicated apps just\nby knowing Kakunin steps and a few good practices.\n\n\nConcepts\n\n\nKakunin uses \ncucumber-js\n internally, because of that all tests (or rather scenarios) are using \nGherkin\n as a \"programming\"\nlanguage.\n\n\nA simple scenario could look like this:\n\n\nFeature:\n    Scenario: Display user profile for logged user\n        Given I am logged in as a \nuser\n\n        When the \ndashboard\n page is displayed\n        And I click the \nprofileButton\n element\n        Then the \nmyProfile\n page is displayed\n        And the \nmyName\n element is visible\n\n\n\n\nThis is how most of Kakunin test scenarios look like.\n\n\nThere are a few concepts to be explained.\n\n\nPage objects\n\n\nPage object is a code representation of a page displayed in browser. Kakunin has a two type of page objects built-in:\n\n\n\n\nBasePage\n - for all kind of pages that do not have any kind of a form\n\n\nFormPage\n - the same as \nBasePage\n + support for form interactions\n\n\n\n\nIn your code, you're going to create own page objects, that will extend one of Kakunin's.\n\n\nWe recommend to use \nFormPage\n as the one you're going to extend.\n\n\nPage object contains information about page url, its elements, locators, but can also have some custom methods if necessary.\n\n\nA very simple Kakunin's page object could look like this.\n\n\nconst { FormPage } = require('kakunin');\n\nclass DashboardPage extends FromPage {\n    constructor() {\n        super();\n\n        this.url = '/dashboard';\n        this.isExternal = false; // optional\n    }\n}\n\nmodule.exports = new DashboardPage();\n\n\n\n\nAs you see a basic page object must extend one of Kakunin's and have to have url defined \nthis.url\n.\n\n\nOptionally if the page is a main page to be displayed then for \nng1\n and \nng2\n apps you have to provider \nthis.isExternal = true;\n flag.\n\n\nThis code should be saved inside \npages\n directory in a file with \njs\n extension. What is important is a name of this file, because we're going to use it\nas parameter for steps, for example \nWhen the \"dashboard\" page is displayed\n expects that there is a file named \ndashboard.js\n inside the \npages\n directory. \n\n\nEvery step that we are using is somehow connected to a object called \ncurrentPage\n. This object value is set to a \npage object that we expect to be on.\n\n\nThis is done by two kind of steps:\n\n\n\n\nthe \"dashboard\" page is displayed\n - this one checks if current url in browser is the same as the one inside page object and changes a value of \ncurrentPage\n\n to this page object\n\n\nI visit the \"dashboard\" page\n - this one goes to the url specified in page object and sets the \ncurrentPage\n to that page object\n\n\n\n\nThis concept is a very simple one and allows you to easily debug the Kakunin. You can assume that every step that is below one of this methods is executed in context of a page object specified in those methods.\nFor example if we have such code:\n\n\nFeature:\n    Scenario: Display user profile for logged user\n        Given I am logged in as a \nuser\n\n        When the \ndashboard\n page is displayed\n        And I click the \nprofileButton\n element\n        Then the \nmyProfile\n page is displayed\n        And the \nmyName\n element is visible\n\n\n\n\nAnd I click the \"profileButton\" element\n is executed in context of \ndashboard\n page objects. So we can assume that \nprofileButton\n should be defined inside the\n\ndashboard.js\n file.\n\n\nAt the same time \nAnd the \"myName\" element is visible\n is executed in context of \nmyProfile\n, so \nmyName\n should be inside \nmyProfile.js\n.\n\n\nElements and locators\n\n\nThe second concept that you have to understand are elements and locators.\n\n\nEvery element that you see on website can be represented as a element inside the page object. This allows us to use it as a parameter for a step, as we did in:\n\nAnd the \"myName\" element is visible\n.\n\n\nDefining elements is very simple. Let's say we have such page object:\n\n\nconst { FormPage } = require('kakunin');\n\nclass DashboardPage extends FromPage {\n    constructor() {\n        super();\n\n        this.url = '/dashboard';\n        this.isExternal = false; // optional\n    }\n}\n\nmodule.exports = new DashboardPage();\n\n\n\n\nElements should be defined inside \nconstructor\n method. Let's add element for \nmyName\n:\n\n\nconst { FormPage } = require('kakunin');\n\nclass DashboardPage extends FromPage {\n    constructor() {\n        super();\n\n        this.url = '/dashboard';\n        this.isExternal = false; // optional\n\n        this.myName = element(by.css('.myName'));\n    }\n}\n\nmodule.exports = new DashboardPage();\n\n\n\n\nAs you see we added a single line \nthis.myName = element(by.css('.myName'));\n.\n\n\nby.css('.myName')\n - is a locator, this is a standard protractor syntax, you can read more on protractors documentation\n\n\nBy joining \nelement\n method with a locator, we created element to be used by our steps.", 
            "title": "How it works"
        }, 
        {
            "location": "/how-it-works/#concepts", 
            "text": "Kakunin uses  cucumber-js  internally, because of that all tests (or rather scenarios) are using  Gherkin  as a \"programming\"\nlanguage.  A simple scenario could look like this:  Feature:\n    Scenario: Display user profile for logged user\n        Given I am logged in as a  user \n        When the  dashboard  page is displayed\n        And I click the  profileButton  element\n        Then the  myProfile  page is displayed\n        And the  myName  element is visible  This is how most of Kakunin test scenarios look like.  There are a few concepts to be explained.", 
            "title": "Concepts"
        }, 
        {
            "location": "/how-it-works/#page-objects", 
            "text": "Page object is a code representation of a page displayed in browser. Kakunin has a two type of page objects built-in:   BasePage  - for all kind of pages that do not have any kind of a form  FormPage  - the same as  BasePage  + support for form interactions   In your code, you're going to create own page objects, that will extend one of Kakunin's.  We recommend to use  FormPage  as the one you're going to extend.  Page object contains information about page url, its elements, locators, but can also have some custom methods if necessary.  A very simple Kakunin's page object could look like this.  const { FormPage } = require('kakunin');\n\nclass DashboardPage extends FromPage {\n    constructor() {\n        super();\n\n        this.url = '/dashboard';\n        this.isExternal = false; // optional\n    }\n}\n\nmodule.exports = new DashboardPage();  As you see a basic page object must extend one of Kakunin's and have to have url defined  this.url .  Optionally if the page is a main page to be displayed then for  ng1  and  ng2  apps you have to provider  this.isExternal = true;  flag.  This code should be saved inside  pages  directory in a file with  js  extension. What is important is a name of this file, because we're going to use it\nas parameter for steps, for example  When the \"dashboard\" page is displayed  expects that there is a file named  dashboard.js  inside the  pages  directory.   Every step that we are using is somehow connected to a object called  currentPage . This object value is set to a \npage object that we expect to be on.  This is done by two kind of steps:   the \"dashboard\" page is displayed  - this one checks if current url in browser is the same as the one inside page object and changes a value of  currentPage \n to this page object  I visit the \"dashboard\" page  - this one goes to the url specified in page object and sets the  currentPage  to that page object   This concept is a very simple one and allows you to easily debug the Kakunin. You can assume that every step that is below one of this methods is executed in context of a page object specified in those methods.\nFor example if we have such code:  Feature:\n    Scenario: Display user profile for logged user\n        Given I am logged in as a  user \n        When the  dashboard  page is displayed\n        And I click the  profileButton  element\n        Then the  myProfile  page is displayed\n        And the  myName  element is visible  And I click the \"profileButton\" element  is executed in context of  dashboard  page objects. So we can assume that  profileButton  should be defined inside the dashboard.js  file.  At the same time  And the \"myName\" element is visible  is executed in context of  myProfile , so  myName  should be inside  myProfile.js .", 
            "title": "Page objects"
        }, 
        {
            "location": "/how-it-works/#elements-and-locators", 
            "text": "The second concept that you have to understand are elements and locators.  Every element that you see on website can be represented as a element inside the page object. This allows us to use it as a parameter for a step, as we did in: And the \"myName\" element is visible .  Defining elements is very simple. Let's say we have such page object:  const { FormPage } = require('kakunin');\n\nclass DashboardPage extends FromPage {\n    constructor() {\n        super();\n\n        this.url = '/dashboard';\n        this.isExternal = false; // optional\n    }\n}\n\nmodule.exports = new DashboardPage();  Elements should be defined inside  constructor  method. Let's add element for  myName :  const { FormPage } = require('kakunin');\n\nclass DashboardPage extends FromPage {\n    constructor() {\n        super();\n\n        this.url = '/dashboard';\n        this.isExternal = false; // optional\n\n        this.myName = element(by.css('.myName'));\n    }\n}\n\nmodule.exports = new DashboardPage();  As you see we added a single line  this.myName = element(by.css('.myName')); .  by.css('.myName')  - is a locator, this is a standard protractor syntax, you can read more on protractors documentation  By joining  element  method with a locator, we created element to be used by our steps.", 
            "title": "Elements and locators"
        }, 
        {
            "location": "/steps/", 
            "text": "", 
            "title": "Built-in steps"
        }, 
        {
            "location": "/extending/", 
            "text": "Kakunin allows you to easily add a custom code in order to extend it's functionality.\n\n\nInternal services\n\n\nRegex builder\n\n\nRegex builder is a special builder for creating \nRegExp\n objects based on regexp name. Internally it has access to not only to all built-in \nregular expression files, but also custom ones specified by user. \n\n\nconst { regexBuilder } = require('kakunin');\n\nconst myRegex = regexBuilder.buildRegex('r:number');\n\n//myRegex will contain RegExp object that matches regular expression under the name \nnumber\n in regexes file.\n\n\n\n\nVariable store\n\n\nVariable store allows you to store and read some values to be used during given scenario.\n\n\nconst { variableStore } = require('kakunin');\n\nvariableStore.storeVariable('some-name', 'some-value');\n\nconst myValue = variableStore.getVariableValue('some-name'); //contains 'some-value'\n\n\n\n\nAdding custom code\n\n\nCustom step\n\n\nIn order to add a custom step, you have to create inside of a directory specified as \nstep_definitions\n in kakunin configuration file \ndefault: /step_definitions\n.\n\n\nWe're using \ncucumber-js 2.X\n so in order to add custom step you have to use \ndefineSupportCode\n method like this:\n\n\n  const { defineSupportCode } = require('kakunin');\n\n  defineSupportCode(({ When }) =\n {\n    When(/^I use kakunin$/, function() {\n      expect(true).to.equal(true);\n    });\n  });\n\n\n\n\nPage objects\n\n\nKakunin comes with some built-in page objects, that should be used as a base for your page objects.\n\n\nIn order to create a custom one, create a file inside the \npages\n directory and extend either \nBasePage\n or \nFormPage\n from kakunin package.\n\n\nconst { BasePage } = require('kakunin');\n\nclass MyPageObject extends BasePage {\n  constructor() {\n    this.myElement = element(by.css('.some-elemnt'));\n  }\n}\n\nmodule.exports = new MyPageObject();\n\n\n\n\nThe only difference between \nBasePage\n and \nFormPage\n is a support for form submission.\n\n\nconst { FormPage } = require('kakunin');\n\nclass MyFormTypePage extends FormPage {\n  constructor() {\n    this.myElement = element(by.css('.some-elemnt'));\n  }\n}\n\nmodule.exports = new MyFormTypePage();\n\n\n\n\nMatchers\n\n\nMatchers are used to compare if given value is matching our expectation. For example if a value in table is a number.\n\n\nYou can add your own matcher as below:\n\n\nconst { matchers } = require('kakunin');\n\nclass MyMatcher {\n  isSatisfiedBy(prefix, name) {\n    return prefix === 'm:' \n name === 'pending';\n  }\n\n  match(protractorElement, matcherName) {\n    return protractorElement.getText().then((value) =\n value === 'pending'); \n  }\n}\n\nmatchers.addMatcher(new MyMatcher());\n\n\n\n\nDictionaries\n\n\nDictionaries allows you to present complicated values in much more readable way. For example if an element must be\nin a form of IRI \n/some-resource/123-123-123-23\n and you wish to use \npending-resource\n as it's alias.\n\n\nYou can add your own dictionary:\n\n\nconst { dictionaries } = require('kakunin');\n\nclass MyDictionary{\n  constructor() {\n    this.values = {\n      '/some-resource/123-123-123-23':'pending-resource'\n    };\n\n    this.name === 'resources';\n  }\n\n  isSatisfiedBy(name) {\n    return this.name === name;\n  }\n\n  getMappedValue(key) {\n    return this.values[key];\n  }\n}\n\ndictionaries.addDictionary(new MyDictionary());\n\n\n\n\nGenerators\n\n\nGenerators allows you to create random values\n\n\nYou can add your own generator:\n\n\nconst { generators } = require('kakunin');\n\nclass MyGeneerator{\n  isSatisfiedBy(name) {\n    return this.name === 'my-generator';\n  }\n\n  generate(params) {\n    return Promise.resolve('some-random-value');\n  }\n}\n\ngenerators.addGenerator(new MyGeneerator());\n\n\n\n\nComparators\n\n\nComparators allows you to check if a set of values has an expected order\n\n\nYou can add your own comparators:\n\n\nconst { comparators } = require('kakunin');\n\nclass MyComparator {\n  isSatisfiedBy(values) {\n    for(let i=0; i\nvalues.length; i++) {\n      if (values[i] !== 'foo' \n values[i] !== 'bar') {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  compare(values, order) {\n    for (let i = 1; i \n values.length; i++) {\n      const previousValue = values[i - 1];\n      const currentValue = values[i];\n\n      if (previousValue === currentValue) {\n        return Promise.reject('Wrong order');\n      }\n    }\n\n    return Promise.resolve('Foo bar!');\n  }\n};\n\ncomparators.addComparator(new MyComparator());\n\n\n\n\nForm handlers\n\n\nForm handlers allows you to fill the form inputs and check value of filled fields\n\n\nYou can add your own handlers:\n\n\nconst { handlers } = require('kakunin');\n\nconst MyHandler {\n  constructor() {\n    this.registerFieldType = false;\n    this.fieldType = 'default';\n  }\n\n  isSatisfiedBy(element, elementName) {\n    return Promise.resolve(elementName === 'someElementName');\n  }\n\n  handleFill(page, elementName, desiredValue) {\n    return page[elementName].isDisplayed()\n      .then(function () {\n        return page[elementName].clear().then(function () {\n          return page[elementName].sendKeys(desiredValue);\n        });\n      }\n    );\n  }\n\n  handleCheck(page, elementName, desiredValue) {\n    return page[elementName].isDisplayed()\n      .then(function () {\n        return page[elementName].getAttribute('value').then(function (value) {\n          if (value === desiredValue) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject(`Expected ${desiredValue} got ${value} for text input element ${elementName}`);\n        });\n      }\n    );\n  }\n};\n\nhandlers.addHandler(new MyHandler());\n\n\n\n\nTransformers\n\n\nTransformers can be used in steps \nWhen I fill the \"form\" form with:\n and \nAnd the \"joinOurStoreForm\" form is filled with:\n.\n\n\nExisting transformers:\n- generators (prefix: \ng:\n)\n- dictionaries (prefix: \nd:\n)\n- variableStore (prefix: \nv:\n)\nTransformers can be used in mentioned steps by using specific 'prefix', parameters are sent after \n:\n sign.\nExample:\n\ng:generatorName:param:param\n\n\nYou can add your own handlers:\n\n\nconst { transformers } = require('kakunin');\n\nclass MyTransformer {\n\n  isSatisfiedBy(prefix) {\n    return 'yourPrefix:' === prefix;\n  }\n\n  transform(value) {\n    //code\n  }\n}\ntransformers.addTransformer(new MyTransformer());\n\n\n\n\nEmail checking service\n\n\nYou can easily check emails with Kakunin. By default we give you MailTrap client implementation, but you can easily add your own client. \n\n\nconst { emailService } = require('kakunin');\n\nclass MyEmailService {\n  //you have access to full kakunin config\n  isSatisfiedBy(config) {\n    return config.email.type === 'my-custom-email-service';\n  }\n\n  //method used to clear emails before tests\n  clearInbox() {\n    ...\n  }\n\n  //method used to get emails - this method should return emails in format described below\n  getEmails() {\n    ...\n  }\n\n  //method used to retrive atachments for given email - should return attachments in format described below\n  getAttachments(email) {\n    ...\n  }\n\n  //method used to mark given email as read\n  markAsRead(email) {\n    ...\n  }\n}\n\nemailService.addAdapter(new MyEmailService());\n\n\n\n\nEmails should be returned as an array of objects with given schema:\n\n\n  [\n    {\n      \nsubject\n: \nSMTP e-mail test\n,\n      \nsent_at\n: \n2013-08-25T19:32:07.567+03:00\n,\n      \nfrom_email\n: \nme@railsware.com\n,\n      \nfrom_name\n: \nPrivate Person\n,\n      \nto_email\n: \ntest@railsware.com\n,\n      \nto_name\n: \nA Test User\n,\n      \nhtml_body\n: \n,\n      \ntext_body\n: \nThis is a test e-mail message.\\r\\n\n,\n      \nemail_size\n: 193,\n      \nis_read\n: true,\n      \ncreated_at\n: \n2013-08-25T19:32:07.576+03:00\n,\n      \nupdated_at\n: \n2013-08-25T19:32:09.232+03:00\n,\n      \nsent_at_timestamp\n: 1377448326\n    }\n  ]\n\n\n\n\nthis is MailTrap email format.\n\n\nAttachments should be returned as an array of objects with given schema:\n\n\n[\n  {\n    \nid\n: 1737,\n    \nmessage_id\n: 54508,\n    \nfilename\n: \nPhotos.png\n,\n    \nattachment_type\n: \nattachment\n,\n    \ncontent_type\n: \nimage/png\n,\n    \ncontent_id\n: \n,\n    \ntransfer_encoding\n: \nbase64\n,\n    \nattachment_size\n: 213855,\n    \ncreated_at\n: \n2013-08-16T00:39:34.677+03:00\n,\n    \nupdated_at\n: \n2013-08-16T00:39:34.677+03:00\n,\n    \nattachment_human_size\n: \n210 KB\n,\n    \ndownload_path\n: \n/api/v1/inboxes/3/messages/54508/attachments/1737/download\n\n  }\n]\n\n\n\n\nthis is MailTrap attachment format.", 
            "title": "Extending Kakunin"
        }, 
        {
            "location": "/extending/#internal-services", 
            "text": "", 
            "title": "Internal services"
        }, 
        {
            "location": "/extending/#regex-builder", 
            "text": "Regex builder is a special builder for creating  RegExp  objects based on regexp name. Internally it has access to not only to all built-in \nregular expression files, but also custom ones specified by user.   const { regexBuilder } = require('kakunin');\n\nconst myRegex = regexBuilder.buildRegex('r:number');\n\n//myRegex will contain RegExp object that matches regular expression under the name  number  in regexes file.", 
            "title": "Regex builder"
        }, 
        {
            "location": "/extending/#variable-store", 
            "text": "Variable store allows you to store and read some values to be used during given scenario.  const { variableStore } = require('kakunin');\n\nvariableStore.storeVariable('some-name', 'some-value');\n\nconst myValue = variableStore.getVariableValue('some-name'); //contains 'some-value'", 
            "title": "Variable store"
        }, 
        {
            "location": "/extending/#adding-custom-code", 
            "text": "", 
            "title": "Adding custom code"
        }, 
        {
            "location": "/extending/#custom-step", 
            "text": "In order to add a custom step, you have to create inside of a directory specified as  step_definitions  in kakunin configuration file  default: /step_definitions .  We're using  cucumber-js 2.X  so in order to add custom step you have to use  defineSupportCode  method like this:    const { defineSupportCode } = require('kakunin');\n\n  defineSupportCode(({ When }) =  {\n    When(/^I use kakunin$/, function() {\n      expect(true).to.equal(true);\n    });\n  });", 
            "title": "Custom step"
        }, 
        {
            "location": "/extending/#page-objects", 
            "text": "Kakunin comes with some built-in page objects, that should be used as a base for your page objects.  In order to create a custom one, create a file inside the  pages  directory and extend either  BasePage  or  FormPage  from kakunin package.  const { BasePage } = require('kakunin');\n\nclass MyPageObject extends BasePage {\n  constructor() {\n    this.myElement = element(by.css('.some-elemnt'));\n  }\n}\n\nmodule.exports = new MyPageObject();  The only difference between  BasePage  and  FormPage  is a support for form submission.  const { FormPage } = require('kakunin');\n\nclass MyFormTypePage extends FormPage {\n  constructor() {\n    this.myElement = element(by.css('.some-elemnt'));\n  }\n}\n\nmodule.exports = new MyFormTypePage();", 
            "title": "Page objects"
        }, 
        {
            "location": "/extending/#matchers", 
            "text": "Matchers are used to compare if given value is matching our expectation. For example if a value in table is a number.  You can add your own matcher as below:  const { matchers } = require('kakunin');\n\nclass MyMatcher {\n  isSatisfiedBy(prefix, name) {\n    return prefix === 'm:'   name === 'pending';\n  }\n\n  match(protractorElement, matcherName) {\n    return protractorElement.getText().then((value) =  value === 'pending'); \n  }\n}\n\nmatchers.addMatcher(new MyMatcher());", 
            "title": "Matchers"
        }, 
        {
            "location": "/extending/#dictionaries", 
            "text": "Dictionaries allows you to present complicated values in much more readable way. For example if an element must be\nin a form of IRI  /some-resource/123-123-123-23  and you wish to use  pending-resource  as it's alias.  You can add your own dictionary:  const { dictionaries } = require('kakunin');\n\nclass MyDictionary{\n  constructor() {\n    this.values = {\n      '/some-resource/123-123-123-23':'pending-resource'\n    };\n\n    this.name === 'resources';\n  }\n\n  isSatisfiedBy(name) {\n    return this.name === name;\n  }\n\n  getMappedValue(key) {\n    return this.values[key];\n  }\n}\n\ndictionaries.addDictionary(new MyDictionary());", 
            "title": "Dictionaries"
        }, 
        {
            "location": "/extending/#generators", 
            "text": "Generators allows you to create random values  You can add your own generator:  const { generators } = require('kakunin');\n\nclass MyGeneerator{\n  isSatisfiedBy(name) {\n    return this.name === 'my-generator';\n  }\n\n  generate(params) {\n    return Promise.resolve('some-random-value');\n  }\n}\n\ngenerators.addGenerator(new MyGeneerator());", 
            "title": "Generators"
        }, 
        {
            "location": "/extending/#comparators", 
            "text": "Comparators allows you to check if a set of values has an expected order  You can add your own comparators:  const { comparators } = require('kakunin');\n\nclass MyComparator {\n  isSatisfiedBy(values) {\n    for(let i=0; i values.length; i++) {\n      if (values[i] !== 'foo'   values[i] !== 'bar') {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  compare(values, order) {\n    for (let i = 1; i   values.length; i++) {\n      const previousValue = values[i - 1];\n      const currentValue = values[i];\n\n      if (previousValue === currentValue) {\n        return Promise.reject('Wrong order');\n      }\n    }\n\n    return Promise.resolve('Foo bar!');\n  }\n};\n\ncomparators.addComparator(new MyComparator());", 
            "title": "Comparators"
        }, 
        {
            "location": "/extending/#form-handlers", 
            "text": "Form handlers allows you to fill the form inputs and check value of filled fields  You can add your own handlers:  const { handlers } = require('kakunin');\n\nconst MyHandler {\n  constructor() {\n    this.registerFieldType = false;\n    this.fieldType = 'default';\n  }\n\n  isSatisfiedBy(element, elementName) {\n    return Promise.resolve(elementName === 'someElementName');\n  }\n\n  handleFill(page, elementName, desiredValue) {\n    return page[elementName].isDisplayed()\n      .then(function () {\n        return page[elementName].clear().then(function () {\n          return page[elementName].sendKeys(desiredValue);\n        });\n      }\n    );\n  }\n\n  handleCheck(page, elementName, desiredValue) {\n    return page[elementName].isDisplayed()\n      .then(function () {\n        return page[elementName].getAttribute('value').then(function (value) {\n          if (value === desiredValue) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject(`Expected ${desiredValue} got ${value} for text input element ${elementName}`);\n        });\n      }\n    );\n  }\n};\n\nhandlers.addHandler(new MyHandler());", 
            "title": "Form handlers"
        }, 
        {
            "location": "/extending/#transformers", 
            "text": "Transformers can be used in steps  When I fill the \"form\" form with:  and  And the \"joinOurStoreForm\" form is filled with: .  Existing transformers:\n- generators (prefix:  g: )\n- dictionaries (prefix:  d: )\n- variableStore (prefix:  v: )\nTransformers can be used in mentioned steps by using specific 'prefix', parameters are sent after  :  sign.\nExample: g:generatorName:param:param  You can add your own handlers:  const { transformers } = require('kakunin');\n\nclass MyTransformer {\n\n  isSatisfiedBy(prefix) {\n    return 'yourPrefix:' === prefix;\n  }\n\n  transform(value) {\n    //code\n  }\n}\ntransformers.addTransformer(new MyTransformer());", 
            "title": "Transformers"
        }, 
        {
            "location": "/extending/#email-checking-service", 
            "text": "You can easily check emails with Kakunin. By default we give you MailTrap client implementation, but you can easily add your own client.   const { emailService } = require('kakunin');\n\nclass MyEmailService {\n  //you have access to full kakunin config\n  isSatisfiedBy(config) {\n    return config.email.type === 'my-custom-email-service';\n  }\n\n  //method used to clear emails before tests\n  clearInbox() {\n    ...\n  }\n\n  //method used to get emails - this method should return emails in format described below\n  getEmails() {\n    ...\n  }\n\n  //method used to retrive atachments for given email - should return attachments in format described below\n  getAttachments(email) {\n    ...\n  }\n\n  //method used to mark given email as read\n  markAsRead(email) {\n    ...\n  }\n}\n\nemailService.addAdapter(new MyEmailService());  Emails should be returned as an array of objects with given schema:    [\n    {\n       subject :  SMTP e-mail test ,\n       sent_at :  2013-08-25T19:32:07.567+03:00 ,\n       from_email :  me@railsware.com ,\n       from_name :  Private Person ,\n       to_email :  test@railsware.com ,\n       to_name :  A Test User ,\n       html_body :  ,\n       text_body :  This is a test e-mail message.\\r\\n ,\n       email_size : 193,\n       is_read : true,\n       created_at :  2013-08-25T19:32:07.576+03:00 ,\n       updated_at :  2013-08-25T19:32:09.232+03:00 ,\n       sent_at_timestamp : 1377448326\n    }\n  ]  this is MailTrap email format.  Attachments should be returned as an array of objects with given schema:  [\n  {\n     id : 1737,\n     message_id : 54508,\n     filename :  Photos.png ,\n     attachment_type :  attachment ,\n     content_type :  image/png ,\n     content_id :  ,\n     transfer_encoding :  base64 ,\n     attachment_size : 213855,\n     created_at :  2013-08-16T00:39:34.677+03:00 ,\n     updated_at :  2013-08-16T00:39:34.677+03:00 ,\n     attachment_human_size :  210 KB ,\n     download_path :  /api/v1/inboxes/3/messages/54508/attachments/1737/download \n  }\n]  this is MailTrap attachment format.", 
            "title": "Email checking service"
        }, 
        {
            "location": "/changelog/", 
            "text": "v1.16.3\n\n\n\n\nchanged \nThere are \"equal 4\" following elements for element \"rows\":\n error message to be more descriptive\n\n\nadded express app to handle form submit tests\n\n\nadded tests form html default field types and tabular content validation\n\n\n\n\nv1.16.2\n\n\n\n\nadded new step \nI visit the \"pageName\" page with parameters:\n which replaces wildcards with a values given in the table\n\n\nfixed step \nI wait for \"condition\" of the \"element\" element\n, currently timeout is set properly to \nelementsVisibilityTimeout\n key which is placed in kakunin.config.js \n\n\nimproved step \nI wait for \"condition\" of the \"element\" element\n, currently singleElement and arrayElements can be checked\n\n\nchange step implementation: \nI click the \"keyName\" key\n to \nI press the \"keyName\" key\n\n\n\n\nv1.16.1\n\n\n\n\nadded changelog\n\n\nadded directory for mailing service adapters [\nemails\n] and connect it to modules loading system\n\n\nfixed a bug where exported mailing service and the one used internally where a different instances", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#v1163", 
            "text": "changed  There are \"equal 4\" following elements for element \"rows\":  error message to be more descriptive  added express app to handle form submit tests  added tests form html default field types and tabular content validation", 
            "title": "v1.16.3"
        }, 
        {
            "location": "/changelog/#v1162", 
            "text": "added new step  I visit the \"pageName\" page with parameters:  which replaces wildcards with a values given in the table  fixed step  I wait for \"condition\" of the \"element\" element , currently timeout is set properly to  elementsVisibilityTimeout  key which is placed in kakunin.config.js   improved step  I wait for \"condition\" of the \"element\" element , currently singleElement and arrayElements can be checked  change step implementation:  I click the \"keyName\" key  to  I press the \"keyName\" key", 
            "title": "v1.16.2"
        }, 
        {
            "location": "/changelog/#v1161", 
            "text": "added changelog  added directory for mailing service adapters [ emails ] and connect it to modules loading system  fixed a bug where exported mailing service and the one used internally where a different instances", 
            "title": "v1.16.1"
        }
    ]
}